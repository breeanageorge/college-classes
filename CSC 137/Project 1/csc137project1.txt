b: Use NOT and NAND primitive gates,

d: Enter the expression as is using the |, &, and ~ symbols as bit-wise logical operators).

PART B:
Verilog Code:
module primitivegate(x, y, z, f, nandout1, nandout2, notout1);
	input x, y, z;
	output f;
	inout nandout1, nandout2, notout1;
	
	wire x, y, z, f, nandout1, nandout2, notout1;
	
	not noty(notout1, y);
	
	nand nand1(nandout1,y,z);
	nand nand2(nandout2,notout1,x);
	nand nand3(f,nandout1,nandout2);
	
endmodule	
	
TESTBENCH:

'include "primitivegate.v"
module promitivegate_tb();
	reg x, y, z;
	
	reg [3:0] k;
	wire f;
	
	primitivegate(x, y, z, f);
	
	intial begin //start test
	$display("Time x y z f"); //header
	$monitor ("%4d %b %b %b, $time, f");
	
	for(k=0; k<=7; k=k+1) begin
		#1 x=k[3];y=k[2];z=k[1];f=k[0]; $display("%4d %b %b %b %b, $time, x, y, z");
	end
	#10	$finish; //stops simulation
	end

endmodule
	
PART D:

module bitwise(x, y, z, f);
	input x, y, z;
	output f;

	wire x, y, z, f;

	assign f = ((x&~y)|(y&z));
	
endmodule

TESTBENCH:

'include "bitwise.v"
module bitwise_tb();
	reg x, y, z;
	
	reg [3:0] k;
	wire f;
	
	bitwise(x, y, z, f);
	
	intial begin //start test
	$display("Time x y z f"); //header
	$monitor ("%4d %b %b %b, $time, f");
	
	for(k=0; k<=7; k=k+1) begin
		#1 x=k[3];y=k[2];z=k[1];f=k[0]; $display("%4d %b %b %b %b, $time, x, y, z");
	end
	#10	$finish; //stops simulation
	end

endmodule
	
	
	
	
	
	
	